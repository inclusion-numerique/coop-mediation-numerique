generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres", "nativeDistinct", "relationJoins", "postgresqlExtensions"]
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
  extensions      = [vector]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Account, Session, User and VerificationToken
// Match next-auth model https://next-auth.js.org/adapters/prisma
// Underscored names are from there too
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Les administrateurs peuvent usurper des utilisateurs de fixtures pour tester des parcours
  // On garde la reference ici pour pouvoir revenir à la session initiale de l’administrateur
  usurperId String? @unique @map("usurper_id") @db.Uuid
  usurper   User?   @relation(fields: [usurperId], references: [id], name: "usurper")

  @@index([userId])
  @@map("sessions")
}

enum UserRole {
  User    @map("user")
  Support @map("support")
  Admin   @map("admin")

  @@map("user_role")
}

enum ProfilInscription {
  ConseillerNumerique             @map("conseiller-numerique")
  CoordinateurConseillerNumerique @map("coordinateur-conseiller-numerique")
  Mediateur                       @map("mediateur")
  Coordinateur                    @map("coordinateur")

  @@map("profil_inscription")
}

enum UserFeatureFlag {
  RdvServicePublic @map("rdv-service-public")
  Assistant        @map("assistant")

  @@map("user_feature_flag")
}

model User {
  id                String            @id @default(uuid()) @db.Uuid
  firstName         String?           @map("first_name")
  lastName          String?           @map("last_name")
  name              String?
  role              UserRole          @default(User)
  email             String            @unique
  phone             String?
  emailVerified     DateTime?         @map("email_verified")
  image             Image?            @relation(fields: [imageId], references: [id])
  imageId           String?           @unique @map("image_id") @db.Uuid
  location          String?
  title             String?
  description       String?
  accounts          Account[]
  sessions          Session[]
  hasSeenOnboarding DateTime?         @map("has_seen_onboarding")
  timezone          String            @default("Europe/Paris")
  featureFlags      UserFeatureFlag[] @default([]) @map("feature_flags")

  // Created by a fixture system, can be reset and will only be here on preview envs
  isFixture Boolean @default(false) @map("is_fixture")

  created   DateTime  @default(now())
  updated   DateTime  @default(now())
  deleted   DateTime?
  lastLogin DateTime? @map("last_login")

  // Flux d’inscription

  // Le profil déclaré par l’utilisateur à la première étape de l’inscription
  profilInscription ProfilInscription? @map("profil_inscription")
  acceptationCgu    DateTime?          @map("acceptation_cgu")

  // Checked profil vérifié avec la base de données conseiller-numerique-v1
  checkedProfilInscription ProfilInscription? @map("checked_profil_inscription")

  // Timestamp des imports de données v1 à l'inscription
  donneesConseillerNumeriqueV1Importees             DateTime? @map("donnees_conseiller_numerique_v1_importees")
  donneesCoordinateurConseillerNumeriqueV1Importees DateTime? @map("donnees_coordinateur_conseiller_numerique_v1_importees")

  // Autres étapes d'inscription
  structureEmployeuseRenseignee DateTime? @map("structure_employeuse_renseignee")
  lieuxActiviteRenseignes       DateTime? @map("lieux_activite_renseignes")
  inscriptionValidee            DateTime? @map("inscription_validee")

  uploads Upload[]

  mediateur    Mediateur?
  coordinateur Coordinateur?
  mutations    Mutation[]
  emplois      EmployeStructure[]
  usurpateur   Session?              @relation(name: "usurper")
  rdvAccount   RdvAccount?
  chatThreads  AssistantChatThread[]

  currentAssistantConfiguration   AssistantConfiguration? @relation(name: "user_current_configuration", fields: [currentAssistantConfigurationId], references: [id]) // The configuration used by default for a new chat thread
  currentAssistantConfigurationId String?                 @unique @map("current_assistant_configuration_id") @db.Uuid

  assistantConfigurations AssistantConfiguration[]

  // "creation" cursor is used to paginate results for API queries
  @@unique([created, id])
  // descending sort on this cursor for api query performances
  @@index([created(sort: Desc), id(sort: Desc)])
  @@map("users")
}

model VerificationToken {
  token      String   @id
  identifier String // Email or other user identifier
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Image {
  id       String @id @default(uuid()) @db.Uuid
  legacyId Int?   @unique @map("legacy_id")

  altText String? @map("alt_text")

  blurUrl String? @map("blur_url")

  // Original dimensions in pixel (before cropping)
  originalHeight Int? @map("original_height")
  originalWidth  Int? @map("original_width")

  // Relative height crop (0-1)
  cropHeight Float @default(1) @map("crop_height")
  // Relative width crop
  cropWidth  Float @default(1) @map("crop_width")
  // Relative top crop
  cropTop    Float @default(0) @map("crop_top")
  // Relative left crop
  cropLeft   Float @default(0) @map("crop_left")

  // Cropped dimensions in pixels
  height Int?
  width  Int?

  upload    Upload @relation(fields: [uploadKey], references: [key])
  uploadKey String @unique @map("upload_key")
  user      User?

  @@map("images")
}

model Upload {
  key       String  @id
  legacyKey String? @unique @map("legacy_key")
  mimeType  String  @map("mime_type")
  name      String

  // Size in bytes
  size Int?

  uploadedBy   User?   @relation(fields: [uploadedById], references: [id])
  uploadedById String? @map("uploaded_by_id") @db.Uuid

  created DateTime @default(now())

  // Is an image
  image Image?

  @@map("uploads")
}

model JobExecution {
  id String @id @default(uuid()) @db.Uuid

  name String

  started   DateTime
  completed DateTime?
  errored   DateTime?
  duration  Int?
  data      Json?
  result    Json?
  error     String?

  @@map("job_executions")
}

enum ApiClientScope {
  Statistiques @map("statistiques")

  // Cras anonymisés
  Activites     @map("activites")
  Structures    @map("structures")
  LieuxActivite @map("lieux_activite")

  // Utilisateurs (excepté admins et supports), incluant données nominatives et leurs roles
  Utilisateurs @map("utilisateurs")

  @@map("api_client_scope")
}

model ApiClient {
  id String @id @default(uuid()) @db.Uuid

  name String @unique

  secretHash String @map("secret_hash") // we only store the hashed secret

  validFrom  DateTime  @map("valid_from")
  validUntil DateTime? @map("valid_until")

  scopes ApiClientScope[]

  created DateTime @default(now())
  updated DateTime @default(now())

  @@map("api_clients")
}

// Domain model

// Un médiateur numérique
model Mediateur {
  id String @id @default(uuid()) @db.Uuid

  userId String @unique @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  // Un médiateur peut être un conseiller numérique
  conseillerNumerique ConseillerNumerique?

  creation     DateTime @default(now())
  modification DateTime @default(now())
  // Cannot soft delete as we need to keep userId and conseillerNumerique.mediateurId unique

  isVisible Boolean @default(false) @map("is_visible")

  coordinations MediateurCoordonne[]
  enActivite    MediateurEnActivite[]
  beneficiaires Beneficiaire[]
  activites     Activite[]
  invitations   InvitationEquipe[]

  @@map("mediateurs")
}

model InvitationEquipe {
  email          String
  coordinateurId String    @map("coordinateur_id") @db.Uuid
  mediateurId    String?   @map("mediateur_id") @db.Uuid
  creation       DateTime? @default(now())
  acceptee       DateTime?
  refusee        DateTime?

  mediateurInvite Mediateur?   @relation(fields: [mediateurId], references: [id])
  coordinateur    Coordinateur @relation(fields: [coordinateurId], references: [id])

  @@unique([email, coordinateurId])
  @@map("invitations_equipes")
}

// Source de vérité https://api.conseiller-numerique.gouv.fr
model ConseillerNumerique {
  // IDs externe chez conseiller-numerique
  id   String @id
  idPg Int?   @unique @map("id_pg") @db.Integer

  mediateurId String    @unique @map("mediateur_id") @db.Uuid
  mediateur   Mediateur @relation(fields: [mediateurId], references: [id])

  @@map("conseillers_numeriques")
}

model CraConseillerNumeriqueV1 {
  id String @id // ID externe chez conseiller-numerique

  importedAt DateTime @map("imported_at") // our field

  // v1 id is the same as the conseiller id if conseiller exists in our database
  // it is present even if the conseiller does not exist in our database
  v1ConseillerNumeriqueId String @map("v1_conseiller_numerique_id")

  canal                    String
  activite                 String
  nbParticipants           Int    @default(0) @map("nb_participants")
  nbParticipantsRecurrents Int    @default(0) @map("nb_participants_recurrents")

  ageMoins12Ans Int @default(0) @map("age_moins_12_ans")
  ageDe12a18Ans Int @default(0) @map("age_de_12_a_18_ans") // XXX this is actually 12-17
  ageDe18a35Ans Int @default(0) @map("age_de_18_a_35_ans")
  ageDe35a60Ans Int @default(0) @map("age_de_35_a_60_ans")
  agePlus60Ans  Int @default(0) @map("age_plus_60_ans")

  statutEtudiant   Int @default(0) @map("statut_etudiant")
  statutSansEmploi Int @default(0) @map("statut_sans_emploi")
  statutEnEmploi   Int @default(0) @map("statut_en_emploi")
  statutRetraite   Int @default(0) @map("statut_retraite")
  statutHeterogene Int @default(0) @map("statut_heterogene")

  themes String[] @default([])

  sousThemesEquipementInformatique String[] @default([]) @map("sous_themes_equipement_informatique")
  sousThemesSante                  String[] @default([]) @map("sous_themes_sante")
  sousThemesAccompagner            String[] @default([]) @map("sous_themes_accompagner")
  sousThemesTraitementTexte        String[] @default([]) @map("sous_themes_traitement_texte")

  duree        String
  dureeMinutes Int    @map("duree_minutes")

  // Poursuites accompagnements
  accompagnementIndividuel  Int @default(0) @map("accompagnement_individuel")
  accompagnementAtelier     Int @default(0) @map("accompagnement_atelier")
  accompagnementRedirection Int @default(0) @map("accompagnement_redirection")

  codePostal         String   @map("code_postal")
  nomCommune         String   @map("nom_commune")
  dateAccompagnement DateTime @map("date_accompagnement")
  codeCommune        String   @map("code_commune")
  organismes         Json? // Poursuite vers autre structures
  annotation         String?

  createdAt DateTime  @unique @map("created_at") // v1 field
  updatedAt DateTime? @map("updated_at") // v1 field

  structureId              String? @map("structure_id")
  structureIdPg            Int?    @map("structure_id_pg")
  structureType            String? @map("structure_type")
  structureStatut          String? @map("structure_statut")
  structureNom             String? @map("structure_nom")
  structureSiret           String? @map("structure_siret")
  structureCodePostal      String? @map("structure_code_postal")
  structureNomCommune      String? @map("structure_nom_commune")
  structureCodeCommune     String? @map("structure_code_commune")
  structureCodeDepartement String? @map("structure_code_departement")
  structureCodeRegion      String? @map("structure_code_region")

  @@index([v1ConseillerNumeriqueId])
  @@index([dateAccompagnement(sort: Asc)])
  @@index([createdAt(sort: Desc)])
  @@index([codeCommune])
  @@map("cras_conseiller_numerique_v1")
}

// Les coordinateurs peuvent être dans le dispositif conseiller-numerique
// ou non. Ils peuvent être associés à plusieurs médiateurs.
model Coordinateur {
  id String @id @default(uuid()) @db.Uuid

  // Clé primaire chez conseiller-numerique
  conseillerNumeriqueId   String? @unique @map("conseiller_numerique_id")
  conseillerNumeriqueIdPg Int?    @unique @map("conseiller_numerique_id_pg")

  // utilisé pour ajouter à la main des conseillers v1 dans les archives de stats coordo
  // ids mongo des conseillers v1 à ajouter
  autresConseillersV1Coordonnes String[] @default([]) @map("autres_conseillers_v1_coordonnes")

  userId String @unique @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  creation     DateTime @default(now())
  modification DateTime @default(now())
  // Cannot soft delete as we need to keep userId and conseillerNumeriqueId unique

  mediateursCoordonnes MediateurCoordonne[]
  invitations          InvitationEquipe[]

  @@index([userId])
  @@map("coordinateurs")
}

model MediateurCoordonne {
  id String @id @default(uuid()) @db.Uuid

  mediateurId String    @map("mediateur_id") @db.Uuid
  mediateur   Mediateur @relation(fields: [mediateurId], references: [id])

  coordinateurId String       @map("coordinateur_id") @db.Uuid
  coordinateur   Coordinateur @relation(fields: [coordinateurId], references: [id])

  creation     DateTime  @default(now())
  modification DateTime  @default(now())
  suppression  DateTime?

  @@unique([coordinateurId, mediateurId])
  @@index([mediateurId])
  @@index([coordinateurId])
  @@map("mediateurs_coordonnes")
}

enum Typologie {
  ACI            @map("ACI")
  ACIPHC         @map("ACIPHC")
  AFPA           @map("AFPA")
  AI             @map("AI")
  ASE            @map("ASE")
  ASSO           @map("ASSO")
  ASSO_CHOMEUR   @map("ASSO_CHOMEUR")
  Autre          @map("Autre")
  AVIP           @map("AVIP")
  BIB            @map("BIB")
  CAARUD         @map("CAARUD")
  CADA           @map("CADA")
  CAF            @map("CAF")
  CAP_EMPLOI     @map("CAP_EMPLOI")
  CAVA           @map("CAVA")
  CC             @map("CC")
  CCAS           @map("CCAS")
  CCONS          @map("CCONS")
  CD             @map("CD")
  CDAS           @map("CDAS")
  CFP            @map("CFP")
  CHRS           @map("CHRS")
  CHU            @map("CHU")
  CIAS           @map("CIAS")
  CIDFF          @map("CIDFF")
  CITMET         @map("CITMET")
  CMP            @map("CMP")
  CMS            @map("CMS")
  CPAM           @map("CPAM")
  CPH            @map("CPH")
  CS             @map("CS")
  CSAPA          @map("CSAPA")
  CSC            @map("CSC")
  DEETS          @map("DEETS")
  DEPT           @map("DEPT")
  DIPLP          @map("DIPLP")
  E2C            @map("E2C")
  EA             @map("EA")
  EATT           @map("EATT")
  EI             @map("EI")
  EITI           @map("EITI")
  ENM            @map("ENM")
  EPCI           @map("EPCI")
  EPI            @map("EPI")
  EPIDE          @map("EPIDE")
  EPN            @map("EPN")
  ES             @map("ES")
  ESAT           @map("ESAT")
  ESS            @map("ESS")
  ETTI           @map("ETTI")
  EVS            @map("EVS")
  FABLAB         @map("FABLAB")
  FABRIQUE       @map("FABRIQUE")
  FAIS           @map("FAIS")
  FT             @map("FT")
  GEIQ           @map("GEIQ")
  HUDA           @map("HUDA")
  LA_POSTE       @map("LA_POSTE")
  MDE            @map("MDE")
  MDH            @map("MDH")
  MDEF           @map("MDEF")
  MDPH           @map("MDPH")
  MDS            @map("MDS")
  MJC            @map("MJC")
  ML             @map("ML")
  MQ             @map("MQ")
  MSA            @map("MSA")
  MSAP           @map("MSAP")
  MUNI           @map("MUNI")
  OACAS          @map("OACAS")
  ODC            @map("ODC")
  OF             @map("OF")
  OIL            @map("OIL")
  OPCS           @map("OPCS")
  PAD            @map("PAD")
  PENSION        @map("PENSION")
  PI             @map("PI")
  PIJ_BIJ        @map("PIJ_BIJ")
  PIMMS          @map("PIMMS")
  PJJ            @map("PJJ")
  PLIE           @map("PLIE")
  PREF           @map("PREF")
  PREVENTION     @map("PREVENTION")
  REG            @map("REG")
  RELAIS_LECTURE @map("RELAIS_LECTURE")
  RESSOURCERIE   @map("RESSOURCERIE")
  RFS            @map("RFS")
  RS_FJT         @map("RS_FJT")
  SCP            @map("SCP")
  SPIP           @map("SPIP")
  TIERS_LIEUX    @map("TIERS_LIEUX")
  UDAF           @map("UDAF")

  @@map("typologie")
}

enum Service {
  AideAuxDemarchesAdministratives                 @map("Aide aux démarches administratives")
  MaitriseDesOutilsNumeriquesDuQuotidien          @map("Maîtrise des outils numériques du quotidien")
  InsertionProfessionnelleViaLeNumerique          @map("Insertion professionnelle via le numérique")
  UtilisationSecuriseeDuNumerique                 @map("Utilisation sécurisée du numérique")
  ParentaliteEtEducationAvecLeNumerique           @map("Parentalité et éducation avec le numérique")
  LoisirsEtCreationsNumeriques                    @map("Loisirs et créations numériques")
  ComprehensionDuMondeNumerique                   @map("Compréhension du monde numérique")
  AccesInternetEtMaterielInformatique             @map("Accès internet et matériel informatique")
  AcquisitionDeMaterielInformatiqueAPrixSolidaire @map("Acquisition de matériel informatique à prix solidaire")

  @@map("service")
}

enum PublicSpecifiquementAdresse {
  Jeunes          @map("Jeunes")
  Etudiants       @map("Étudiants")
  FamillesEnfants @map("Familles et/ou enfants")
  Seniors         @map("Seniors")
  Femmes          @map("Femmes")

  @@map("public_specifiquement_adresse")
}

enum PriseEnChargeSpecifique {
  Surdite                  @map("Surdité")
  HandicapsMoteurs         @map("Handicaps moteurs")
  HandicapsMentaux         @map("Handicaps mentaux")
  Illettrisme              @map("Illettrisme")
  LanguesEtrangeresAnglais @map("Langues étrangères (anglais)")
  LanguesEtrangeresAutre   @map("Langues étrangères (autres)")
  DeficienceVisuelle       @map("Déficience visuelle")

  @@map("prise_en_charge_specifique")
}

enum FraisACharge {
  Gratuit              @map("Gratuit")
  GratuitSousCondition @map("Gratuit sous condition")
  Payant               @map("Payant")

  @@map("frais_a_charge")
}

enum DispositifProgrammeNational {
  AidantsConnect                    @map("Aidants Connect")
  BibliothequesNumeriqueDeReference @map("Bibliothèques numérique de référence")
  CertificationPix                  @map("Certification PIX")
  ConseillersNumeriques             @map("Conseillers numériques")
  EmmausConnect                     @map("Emmaüs Connect")
  FranceServices                    @map("France Services")
  GrandeEcoleDuNumerique            @map("Grande école du numérique")
  LaCroixRouge                      @map("La Croix Rouge")
  PointAccesNumeriqueCaf            @map("Point d'accès numérique CAF")
  PromeneursDuNet                   @map("Promeneurs du net")
  RelaisNumeriqueEmmausConnect      @map("Relais numérique (Emmaüs Connect)")

  @@map("dispositif_programme_national")
}

enum FormationLabel {
  FormeAMonEspaceSante                 @map("Formé à « Mon Espace Santé »")
  FormeADuplex                         @map("Formé à « DUPLEX » (illettrisme)")
  ArniaMednum                          @map("Arnia/MedNum BFC (Bourgogne-Franche-Comté)")
  CollectifRessourcesEtActeursReemploi @map("Collectif ressources et acteurs réemploi (Normandie)")
  FabriquesDeTerritoire                @map("Fabriques de Territoire")
  LesEclaireurs                        @map("Les Éclaireurs du numérique (Drôme)")
  MesPapiers                           @map("Mes Papiers (Métropole de Lyon)")
  Ordi3                                @map("ORDI 3.0")
  SudLabs                              @map("SUD LABS (PACA)")

  @@map("formation_label")
}

enum Itinerance {
  Itinerant @map("Itinérant")
  Fixe      @map("Fixe")

  @@map("itinerance")
}

enum ModaliteAcces {
  SePresenter         @map("Se présenter")
  Telephoner          @map("Téléphoner")
  ContacterParMail    @map("Contacter par mail")
  PrendreRdvEnLigne   @map("Prendre un RDV en ligne")
  PasDePublic         @map("Ce lieu n’accueille pas de public")
  FicheDePrescription @map("Envoyer un mail avec une fiche de prescription")

  @@map("modalite_acces")
}

enum ModaliteAccompagnement {
  EnAutonomie              @map("En autonomie")
  AccompagnementIndividuel @map("Accompagnement individuel")
  DansUnAtelierCollectif   @map("Dans un atelier collectif")
  ADistance                @map("À distance")

  @@map("modalite_accompagnement")
}

// Lieu physique. Source de vérité interne. Peut être mise à jour depuis StructureCartographieNationale.
// Ce model recense les structures utilisées dans la coop, ce n'est pas une source de vérité exaustive des structures
model Structure {
  // Id
  id String @id @default(uuid()) @db.Uuid

  structureCartographieNationaleId String?                         @map("id_cartographie_nationale")
  structureCartographieNationale   StructureCartographieNationale? @relation(fields: [structureCartographieNationaleId], references: [id], onDelete: SetNull)

  // Timestamps internes à coop-mediation-numerique
  creation     DateTime  @default(now())
  modification DateTime  @default(now())
  suppression  DateTime?

  // # Relations
  emplois              EmployeStructure[]
  mediateursEnActivite MediateurEnActivite[]

  // Champs métier

  nom String

  adresse           String
  commune           String
  codePostal        String  @map("code_postal") @db.VarChar(5)
  codeInsee         String? @map("code_insee") @db.VarChar(5)
  complementAdresse String? @map("complement_adresse")
  latitude          Float?
  longitude         Float?

  siret String?
  rna   String?

  visiblePourCartographieNationale Boolean @default(false) @map("visible_pour_cartographie_nationale")

  // Champs venant du schema des lieux de mediation numérique
  // CF optionsStructures.ts pour les valeurs possibles
  // CF LieuStandardMediationNumerique.ts pour la documentation complète

  typologies                    Typologie[]                   @default([])
  presentationResume            String?                       @map("presentation_resume")
  presentationDetail            String?                       @map("presentation_detail")
  siteWeb                       String?                       @map("site_web")
  telephone                     String?
  courriels                     String[]                      @default([])
  ficheAccesLibre               String?                       @map("fiche_acces_libre") // url vers fiche accès libre
  horaires                      String?
  priseRdv                      String?                       @map("prise_rdv") // url vers le site de prise de rendez-vous
  structureParente              String?                       @map("structure_parente")
  services                      Service[]                     @default([])
  publicsSpecifiquementAdresses PublicSpecifiquementAdresse[] @default([]) @map("publics_specifiquement_adresses")
  priseEnChargeSpecifique       PriseEnChargeSpecifique[]     @default([]) @map("prise_en_charge_specifique")
  fraisACharge                  FraisACharge[]                @default([]) @map("frais_a_charge")
  dispositifProgrammesNationaux DispositifProgrammeNational[] @default([]) @map("dispositif_programmes_nationaux")
  formationsLabels              FormationLabel[]              @default([]) @map("formations_labels")
  autresFormationsLabels        String[]                      @default([]) @map("autres_formations_labels")
  itinerance                    Itinerance[]                  @default([])
  modalitesAcces                ModaliteAcces[]               @default([]) @map("modalites_acces")
  modalitesAccompagnement       ModaliteAccompagnement[]      @default([]) @map("modalites_accompagnement")
  activites                     Activite[]                    @relation(name: "activite_structure")

  nomReferent       String? @map("nom_referent")
  courrielReferent  String? @map("courriel_referent")
  telephoneReferent String? @map("telephone_referent")

  // "creation" cursor is used to paginate results for API queries
  @@unique([creation, id])
  // descending sort on this cursor for api query performances
  @@index([creation(sort: Desc), id(sort: Desc)])
  @@index([structureCartographieNationaleId])
  @@map("structures")
}

// Lieu physique. CF LieuStandardMediationNumerique.ts.
// La source de véritée est cartographie-nationale https://anct-cartographie-nationale.github.io/api-application/v0/#operation/lieux-inclusion-numerique.get
// Ce model joue le role de local data cache / search index pour les lieux
model StructureCartographieNationale {
  // Id externe chez cartographie-nationale
  id String @id

  // Timestamps internes à coop-mediation-numerique
  creation     DateTime  @default(now())
  modification DateTime  @default(now())
  suppression  DateTime?

  // Importation depuis dataset cartographie-nationale
  creationImport     DateTime? @map("creation_import")
  // modifié suite à une mise à jour de data-inclusion
  modificationImport DateTime? @map("modification_import")
  // plus disponible dans data-inclusion
  suppressionImport  DateTime? @map("suppression_import")

  // # Relations
  // There should be only one but we need to be able to have multiple for temporary
  // duplicate detections
  structures Structure[]

  // # Id extractions
  // L'id de structure carto nationale concatene les ids de différentes sources. On les stocke ici pour faciliter les lookups.
  conseillerNumeriquePermanenceIds String[] @default([]) @map("conseiller_numerique_permanence_ids")
  coopId                           String?  @map("coop_id")
  // In some rare edge cases, we have multiple coopIds, that indicate duplicates in our structures, we store them here for deduplication checks
  coopIds                          String[] @default([]) @map("coop_ids")

  // # Champs cartographie nationale

  // SIRET ou RNA ou RIDET
  pivot String

  // Nom du lieu
  nom String

  // Nom de la commune rattachée à l'adresse du lieu
  commune String

  // Code postal rattaché à l'adresse du lieu
  codePostal String @map("code_postal") @db.VarChar(5)

  // Code officiel géographique de la commune rattachée à l'adresse du lieu
  codeInsee String? @map("code_insee") @db.VarChar(5)

  // Adresse du lieu
  adresse String

  // Complément d'adresse
  complementAdresse String? @map("complement_adresse")

  // Latitude du lieu
  latitude Float?

  // Longitude du lieu
  longitude Float?

  // Typologie du lieu
  typologie String?

  // Numéro de téléphone du lieu
  telephone String? @db.VarChar(20)

  // Courriel(s) de contact du lieu
  courriels String?

  // Site web du lieu
  siteWeb String? @map("site_web")

  // Horaires d'ouverture du lieu
  horaires String?

  // Présentation résumée du lieu
  presentationResume String? @map("presentation_resume")

  // Présentation détaillée du lieu
  presentationDetail String? @map("presentation_detail")

  // Structure collectant la donnée
  source String?

  // Itinérance du lieu
  itinerance String?

  // Structure parente du lieu
  structureParente String? @map("structure_parente")

  // Date de mise à jour des données
  dateMaj DateTime @map("date_maj") @db.Date

  // Services proposés par le lieu
  services String?

  // Publics spécifiquement adressés par le lieu
  publicsSpecifiquementAdresses String? @map("publics_specifiquement_adresses")

  // Prise en charge spécifique des publics
  priseEnChargeSpecifique String? @map("prise_en_charge_specifique")

  // Frais à charge pour accéder au lieu
  fraisACharge String? @map("frais_a_charge")

  // Dispositifs et programmes nationaux auxquels appartient le lieu
  dispositifProgrammesNationaux String? @map("dispositif_programmes_nationaux")

  // Formations et labels obtenus par le lieu
  formationsLabels String? @map("formations_labels")

  // Autres formations et labels obtenus par le lieu
  autresFormationsLabels String? @map("autres_formations_labels")

  // Modalités d'accès au lieu
  modalitesAcces String? @map("modalites_acces")

  // Modalités d'accompagnement proposées par le lieu
  modalitesAccompagnement String? @map("modalites_accompagnement")

  // URL vers la fiche Accès libre du lieu
  ficheAccesLibre String? @map("fiche_acces_libre")

  // URL vers le site de prise de rendez-vous en ligne
  priseRdv String? @map("prise_rdv")

  // Index conseillerNumeriqueId, aidantsConnectId, and coopIds array values for fast lookups
  @@index([coopId])
  @@map("structures_cartographie_nationale")
}

model EmployeStructure {
  id String @id @default(uuid()) @db.Uuid

  userId String @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  structureId String    @map("structure_id") @db.Uuid
  structure   Structure @relation(fields: [structureId], references: [id])

  creation     DateTime  @default(now()) // Représente la date de début de l'emploi
  modification DateTime  @default(now())
  suppression  DateTime? // Représente la date de fin de l'emploi

  @@index([userId])
  @@index([structureId])
  @@map("employes_structures")
}

model MediateurEnActivite {
  id String @id @default(uuid()) @db.Uuid

  mediateurId String    @map("mediateur_id") @db.Uuid
  mediateur   Mediateur @relation(fields: [mediateurId], references: [id])

  structureId String    @map("structure_id") @db.Uuid
  structure   Structure @relation(fields: [structureId], references: [id])

  creation     DateTime  @default(now())
  modification DateTime  @default(now())
  suppression  DateTime?

  @@index([mediateurId])
  @@index([structureId])
  @@map("mediateurs_en_activite")
}

enum Genre {
  Masculin      @map("masculin")
  Feminin       @map("feminin")
  NonCommunique @map("non_communique")

  @@map("genre")
}

enum TrancheAge {
  MoinsDeDouze          @map("moins_de_douze")
  DouzeDixHuit          @map("douze_dix_huit")
  DixHuitVingtQuatre    @map("dix_huit_vingt_quatre")
  VingtCinqTrenteNeuf   @map("vingt_cinq_trente_neuf")
  QuaranteCinquanteNeuf @map("quarante_cinquante_neuf")
  SoixanteSoixanteNeuf  @map("soixante_soixante_neuf")
  SoixanteDixPlus       @map("soixante_dix_plus")
  NonCommunique         @map("non_communique")

  @@map("tranche_age")
}

enum StatutSocial {
  Scolarise     @map("scolarise")
  SansEmploi    @map("sans_emploi")
  EnEmploi      @map("en_emploi")
  Retraite      @map("retraite")
  NonCommunique @map("non_communique")

  @@map("statut_social")
}

model Beneficiaire {
  id String @id @default(uuid()) @db.Uuid

  // Identifiant chez RDV Service Public si le bénéficiaire est synchronisé avec RDV Service Public
  rdvServicePublicId Int? @map("rdv_service_public_id")

  // Relation avec le médiateur à qui est "rattaché" le bénéficiaire
  // Si le beneficiaire est "partagé", cela gardera la trace du médiateur source
  mediateurId String    @map("mediateur_id") @db.Uuid
  mediateur   Mediateur @relation(fields: [mediateurId], references: [id])

  // Lorsqu’un médiateur ne spécifie pas de bénéficiaire suivi, un bénéficiaire
  // anonyme est créé, avec les memes informations mais sans prenom et nom
  anonyme Boolean @default(false)

  // Lorsqu’un bénéficiaire anonyme est ajouté via cra collectif
  // ses attributions de genre, tranche d’age et statut social sont aléatoire
  // parmis le groupe de bénéficiaire anonyme de l’atelier
  attributionsAleatoires Boolean @default(false)

  prenom         String?
  nom            String?
  telephone      String?
  pasDeTelephone Boolean? @map("pas_de_telephone")
  email          String?
  anneeNaissance Int?     @map("annee_naissance")
  adresse        String?

  // Nom de la commune de résidence
  commune           String?
  communeCodePostal String? @map("commune_code_postal")
  communeCodeInsee  String? @map("commune_code_insee")

  genre        Genre?
  trancheAge   TrancheAge?   @map("tranche_age")
  statutSocial StatutSocial? @map("statut_social")

  notes String?

  import DateTime? // Uniquement défini si importé depuis un fichier

  creation     DateTime  @default(now())
  modification DateTime  @default(now())
  suppression  DateTime?

  accompagnements Accompagnement[]

  @@index([mediateurId])
  @@map("beneficiaires")
}

enum TypeActivite {
  Individuel @map("individuel")
  Collectif  @map("collectif")

  @@map("type_activite")
}

model Activite {
  id String @id @default(uuid()) @db.Uuid

  // Discriminant pour le type de Cra et champs qui seront nulls ou non
  // La validation se fait au niveau des routeurs TRPC (validation zod pour chaque type)
  type TypeActivite

  // CHAMPS COMMUNS

  mediateurId     String           @map("mediateur_id") @db.Uuid
  mediateur       Mediateur        @relation(fields: [mediateurId], references: [id])
  accompagnements Accompagnement[]
  date            DateTime         @map("date") @db.Date
  duree           Int              @map("duree") // Durée en minutes
  notes           String?
  rdvServicePublicId Int? @map("rdv_service_public_id") // id externe du RDV Service Public qui est à l'origine de cette Activité

  // Structure est renseigné
  // - si typeLieu = LieuActivite
  structureId    String?    @map("structure_id") @db.Uuid
  structure      Structure? @relation(fields: [structureId], references: [id], name: "activite_structure")
  // lieu* est renseigné
  // - si typeLieu = A Domicile
  // - ou si typeLieu = Autre
  // - ou si typeLieu = A Distance -> assigné à la commune de la structure employeuse
  lieuCodePostal String?    @map("lieu_code_postal")
  lieuCommune    String?    @map("lieu_commune")
  lieuCodeInsee  String?    @map("lieu_code_insee")

  creation     DateTime  @default(now())
  modification DateTime  @default(now())
  suppression  DateTime?

  // CHAMPS CRA INDIVIDUELS ET DEMARCHE ADMINISTRATIVE
  typeLieu               TypeLieu                @map("type_lieu")
  autonomie              Autonomie?
  structureDeRedirection StructureDeRedirection? @map("structure_de_redirection")

  // CHAMPS CRA INDIVIDUEL ET COLLECTIF
  materiel    Materiel[]   @default([])
  thematiques Thematique[] @default([]) @map("thematiques")

  // CHAMPS CRA INDIVIDUEL
  orienteVersStructure Boolean? @map("oriente_vers_structure")

  // CHAMPS CRA DEMARCHE ADMINISTRATIVE
  precisionsDemarche String? @map("precisions_demarche")

  // CHAMPS CRA COLLECTIF
  titreAtelier String?        @map("titre_atelier")
  niveau       NiveauAtelier?

  // "creation" cursor is used to paginate results for API queries
  @@unique([creation, id])
  // index relations
  @@index([structureId])
  @@index([mediateurId])
  // descending sort on this cursor for api query performances
  @@index([creation(sort: Desc), id(sort: Desc)])
  @@map("activites")
}

// Ce modèle représente un accompagnement d'un bénéficiare
// Il s’agit d'une participation à une activité individuelle ou un atelier
// Il y aura un seul accompagnement par activité de type individuelle ou démarche administratif
// Cela permet d’aggréger facilement les accompagnement quelque soit le type d’activité
model Accompagnement {
  id String @id @default(uuid()) @db.Uuid

  beneficiaireId String       @map("beneficiaire_id") @db.Uuid
  beneficiaire   Beneficiaire @relation(fields: [beneficiaireId], references: [id])

  activiteId String   @map("activite_id") @db.Uuid
  activite   Activite @relation(fields: [activiteId], references: [id])

  premierAccompagnement Boolean @default(false) @map("premier_accompagnement")

  @@unique([beneficiaireId, activiteId])
  @@index([beneficiaireId])
  @@index([activiteId])
  @@map("accompagnements")
}

enum TypeLieu {
  LieuActivite @map("lieu_activite")
  Domicile     @map("domicile")
  ADistance    @map("a_distance")
  Autre        @map("autre")

  @@map("type_lieu")
}

enum Materiel {
  Ordinateur @map("ordinateur")
  Telephone  @map("telephone")
  Tablette   @map("tablette")
  Autre      @map("autre")
  Aucun      @map("aucun")

  @@map("materiel")
}

// Thematiques d’inclusion numérique
enum Thematique {
  DiagnosticNumerique             @map("diagnostic_numerique")
  PrendreEnMainDuMateriel         @map("prendre_en_main_du_materiel")
  MaintenanceDeMateriel           @map("maintenance_de_materiel")
  GereSesContenusNumeriques       @map("gere_ses_contenus_numeriques")
  NavigationSurInternet           @map("navigation_sur_internet")
  Email                           @map("email")
  Bureautique                     @map("bureautique")
  ReseauxSociaux                  @map("reseaux_sociaux")
  Sante                           @map("sante")
  BanqueEtAchatsEnLigne           @map("banque_et_achats_en_ligne")
  Entrepreneuriat                 @map("entrepreneuriat")
  InsertionProfessionnelle        @map("insertion_professionnelle")
  SecuriteNumerique               @map("securite_numerique")
  Parentalite                     @map("parentalite")
  ScolariteEtNumerique            @map("scolarite_et_numerique")
  CreerAvecLeNumerique            @map("creer_avec_le_numerique")
  CultureNumerique                @map("culture_numerique")
  IntelligenceArtificielle        @map("intelligence_artificielle")
  AideAuxDemarchesAdministratives @map("aide_aux_demarches_administratives")
  PapiersElectionsCitoyennete     @map("papiers_elections_citoyennete")
  FamilleScolarite                @map("famille_scolarite")
  SocialSante                     @map("social_sante")
  TravailFormation                @map("travail_formation")
  Logement                        @map("logement")
  TransportsMobilite              @map("transports_mobilite")
  ArgentImpots                    @map("argent_impots")
  Justice                         @map("justice")
  EtrangersEurope                 @map("etrangers_europe")
  LoisirsSportsCulture            @map("loisirs_sports_culture")
  Associations                    @map("associations")

  @@map("thematique")
}

enum Autonomie {
  EntierementAccompagne @map("entierement_accompagne")
  PartiellementAutonome @map("partiellement_autonome")
  Autonome              @map("autonome")

  @@map("autonomie")
}

enum StructureDeRedirection {
  OperateurOuOrganismeEnCharge    @map("operateur_ou_organisme_en_charge")
  AideAuxDemarchesAdministratives @map("aide_aux_demarches_administratives")
  Administration                  @map("administration")
  MediationNumerique              @map("mediation_numerique")
  Autre                           @map("autre")

  @@map("structure_de_redirection")
}

enum NiveauAtelier {
  Debutant      @map("debutant")
  Intermediaire @map("intermediaire")
  Avance        @map("avance")

  @@map("niveau_atelier")
}

// An account linked in the Rdv service
// https://rdv.anct.gouv.fr
// Stores the external id of the account and the oauth credentials
model RdvAccount {
  id Int @id // external id of the "agent" account in rdv systems

  userId String @unique @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  organisations RdvOrganisation[] // Be careful as this may be out of sync with the data from oauth. Used as a cache and should be refreshed when needed.

  accessToken  String?   @map("access_token") // Empty if account created but oauth not linked or invalidated
  refreshToken String?   @map("refresh_token")
  expiresAt    DateTime? @map("expires_at")
  scope        String?
  metadata     Json? // metadata on the account coming from the rdv service

  created DateTime @default(now()) @map("created")
  updated DateTime @updatedAt @map("updated")

  @@index([userId])
  @@map("rdv_accounts")
}

// Organisations owned by RDV Service Public
// Be careful as this may be out of sync with the data from oauth. Used as a cache and should be refreshed when needed.
model RdvOrganisation {
  id Int @id

  accountId Int        @map("account_id")
  account   RdvAccount @relation(fields: [accountId], references: [id])

  name        String
  email       String?
  phoneNumber String? @map("phone_number")

  @@index([accountId])
  @@map("rdv_organisations")
}

enum MutationName {
  ValiderInscription                       @map("valider_inscription")
  ModifierUtilisateur                      @map("modifier_utilisateur")
  ResetInscription                         @map("reset_inscription")
  UsurperUtilisateur                       @map("usurper_utilisateur")
  CreerMediateur                           @map("creer_mediateur")
  ModifierMediateur                        @map("modifier_mediateur")
  SupprimerMediateur                       @map("supprimer_mediateur")
  CreerCoordinateur                        @map("creer_coordinateur")
  ModifierCoordinateur                     @map("modifier_coordinateur")
  SupprimerCoordinateur                    @map("supprimer_coordinateur")
  CreerMediateurCoordonne                  @map("creer_mediateur_coordonne")
  SupprimerMediateurCoordonne              @map("supprimer_mediateur_coordonne")
  InviterMediateursCoordonnes              @map("inviter_mediateurs_coordonnes")
  AccepterInvitationMediateurCoordonne     @map("accepter_invitation_mediateur_coordonne")
  RefuserInvitationMediateurCoordonne      @map("refuser_invitation_mediateur_coordonne")
  SetMediateurVisibility                   @map("set_mediateur_visibility")
  CreerActivite                            @map("creer_activite")
  ModifierActivite                         @map("modifier_activite")
  SupprimerActivite                        @map("supprimer_activite")
  CreerBeneficiaire                        @map("creer_beneficiaire")
  ImporterBeneficiaires                    @map("importer_beneficiaires")
  ModifierBeneficiaire                     @map("modifier_beneficiaire")
  SupprimerBeneficiaire                    @map("supprimer_beneficiaire")
  CreerStructure                           @map("creer_structure")
  ModifierStructure                        @map("modifier_structure")
  MiseAJourStructuresCartographieNationale @map("mise_a_jour_structures_cartographie_nationale")
  CreerEmployeStructure                    @map("creer_employe_structure")
  ModifierEmployeStructure                 @map("modifier_employe_structure")
  SupprimerEmployeStructure                @map("supprimer_employe_structure")
  CreerMediateurEnActivite                 @map("creer_mediateur_en_activite")
  SupprimerMediateurEnActivite             @map("supprimer_mediateur_en_activite")

  @@map("mutation_name")
}

// Log d’utilisation des features de l’application
// Ce n’est pas une source vérité à la event sourcing
// C’est un log d’audit
model Mutation {
  id String @id @default(uuid()) @db.Uuid

  // User non renseigné si l’action est faite par un système
  userId String? @map("user_id") @db.Uuid
  user   User?   @relation(fields: [userId], references: [id])

  nom MutationName @map("nom")

  duration Int

  // Do not include sensitive data, only useful for debugging or auditing
  data Json

  timestamp DateTime @default(now()) @map("timestamp")

  @@index([userId])
  @@index([timestamp(sort: Desc)])
  @@map("mutations")
}

model AssistantChatThread {
  id          String  @id @default(uuid()) @db.Uuid
  createdBy   User?   @relation(fields: [createdById], references: [id])
  createdById String? @map("created_by_id") @db.Uuid

  title String?

  context String

  created  DateTime               @default(now())
  updated  DateTime               @default(now())
  deleted  DateTime?
  messages AssistantChatMessage[]

  configuration            AssistantConfiguration @relation(fields: [assistantConfigurationId], references: [id])
  assistantConfigurationId String                 @map("assistant_configuration_id") @db.Uuid

  @@index([createdById])
  @@map("assistant_chat_threads")
}

model AssistantConfiguration {
  id String @id @default(uuid()) @db.Uuid

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id") @db.Uuid

  title String? // Optional title for the configuration
  notes String? // User notes on the configuration

  created             DateTime @default(now())
  model               String
  frequencyPenalty    Float?   @map("frequency_penalty")
  functionCall        String?  @map("function_call") // none, auto
  maxCompletionTokens Int?     @map("max_completion_tokens")
  maxTokens           Int?     @map("max_tokens")
  parallelToolCalls   Boolean? @map("parallel_tool_calls")
  presencePenalty     Float?   @map("presence_penalty")
  reasoningEffort     String?  @map("reasoning_effort") // low, medium, high
  seed                Int?     @map("seed")
  temperature         Float?   @map("temperature")
  topLogProbs         Int?     @map("top_logprobs")
  topP                Float?   @map("top_p")

  systemMessage String? @map("system_message")

  searchToolDescription String?               @map("search_tool_description")
  chatThreads           AssistantChatThread[]

  currentConfigurationFor User? @relation(name: "user_current_configuration")

  @@map("assistant_configurations")
}

// Based on the ai sdk model
model AssistantChatMessage {
  id          String              @id @default(uuid()) @db.Uuid
  role        String // 'system' | 'user' | 'assistant'
  thread      AssistantChatThread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  threadId    String              @map("thread_id") @db.Uuid
  created     DateTime            @default(now())
  parts       Json[]              @default([]) // See CoreMessage.parts types (text, tool-result, etc...)
  annotations Json[]              @default([]) // Custom data
  attachments Json[]              @default([]) // List of attachments (name?: string, contentType?: string, url: string)

  @@index([threadId])
  @@index([created(sort: Asc)])
  @@map("assistant_chat_messages")
}

model RagDocumentChunk {
  id String @id @default(uuid()) @db.Uuid // internal id of the chunk

  source      String // Source of the document (e.g.: centre-aide-notion, les-bases, ...)
  type        String // Type relative to the source (e.g.: article, user, webpage, ...)
  content     String // Raw content of the chunk
  documentMd5 String @map("document_md5") // md5 hash of the entire source document content to check if the chunk is still valid

  sourceId String  @map("source_id") // unique id of the source document within the source, can have multiple chunks for the same source
  chunk    Int // chunk number for the same source id
  title    String? // title of the source document if available
  url      String? // url of the source document if available

  created DateTime @default(now())
  updated DateTime @default(now())

  embeddingModel String                 @map("embedding_model")
  embedding      Unsupported("vector")? // This is optional only to allow Prisma client generation, it will be always set

  @@index([documentMd5])
  @@index([sourceId])
  @@map("rag_document_chunks")
}
