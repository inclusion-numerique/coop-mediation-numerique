generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "nativeDistinct", "relationJoins"]
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Account, Session, User and VerificationToken
// Match next-auth model https://next-auth.js.org/adapters/prisma
// Underscored names are from there too
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// User roles are used for global app permissions
// Domain roles are defined by relations between user and domain models
enum UserRole {
  Admin @map("admin")
  User  @map("user")

  @@map("user_roles")
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  firstName     String?   @map("first_name")
  lastName      String?   @map("last_name")
  name          String?
  role          UserRole  @default(User)
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         Image?    @relation(fields: [imageId], references: [id])
  imageId       String?   @unique @map("image_id") @db.Uuid
  location      String?
  title         String?
  description   String?
  accounts      Account[]
  sessions      Session[]

  created   DateTime  @default(now())
  updated   DateTime  @default(now())
  lastLogin DateTime? @map("last_login")

  uploads Upload[]

  mediateur    Mediateur?
  coordinateur Coordinateur?
  mutations    Mutation[]

  @@map("users")
}

model VerificationToken {
  token      String   @id
  identifier String // Email or other user identifier
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Image {
  id       String @id @default(uuid()) @db.Uuid
  legacyId Int?   @unique @map("legacy_id")

  altText String? @map("alt_text")

  blurUrl String? @map("blur_url")

  // Original dimensions in pixel (before cropping)
  originalHeight Int? @map("original_heigth")
  originalWidth  Int? @map("original_width")

  // Relative height crop (0-1)
  cropHeight Float @default(1) @map("crop_height")
  // Relative width crop
  cropWidth  Float @default(1) @map("crop_width")
  // Relative top crop
  cropTop    Float @default(0) @map("crop_top")
  // Relative left crop
  cropLeft   Float @default(0) @map("crop_left")

  // Cropped dimensions in pixels
  height Int?
  width  Int?

  upload    Upload @relation(fields: [uploadKey], references: [key])
  uploadKey String @unique @map("upload_key")
  user      User?

  @@map("images")
}

model Upload {
  key       String  @id
  legacyKey String? @unique @map("legacy_key")
  mimeType  String  @map("mime_type")
  name      String

  // Size in bytes
  size Int?

  uploadedBy   User?   @relation(fields: [uploadedById], references: [id])
  uploadedById String? @map("uploaded_by_id") @db.Uuid

  created DateTime @default(now())

  // Is an image
  image Image?

  @@map("uploads")
}

model JobExecution {
  id String @id @default(uuid()) @db.Uuid

  name String

  started   DateTime
  completed DateTime?
  errored   DateTime?
  duration  Int?
  data      Json?
  result    Json?
  error     String?

  @@map("job_executions")
}

// Domain model

// Un médiateur numérique
model Mediateur {
  id String @id @default(uuid()) @db.Uuid

  userId String @unique @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  // Un médiateur peut être un conseiller numérique
  conseillerNumerique ConseillerNumerique?

  creation     DateTime  @default(now())
  modification DateTime  @default(now())
  suppression  DateTime?

  coordinations MediateurCoordonne[]
  emplois       MediateurEmploye[]
  enActivite    MediateurEnActivite[]

  @@map("mediateurs")
}

// Source de vérité https://api.conseiller-numerique.gouv.fr
model ConseillerNumerique {
  // ID externe chez conseiller-numerique
  id String @id

  mediateurId String    @unique @map("mediateur_id") @db.Uuid
  mediateur   Mediateur @relation(fields: [mediateurId], references: [id])

  @@map("conseillers_numeriques")
}

// Tous les coordinateurs sont coordinateurs officiellement chez conseiller-numérique
model Coordinateur {
  id String @id @default(uuid()) @db.Uuid

  // Clé primaire chez conseiller-numerique
  conseillerNumeriqueId String @unique @map("conseiller_numerique_id")

  userId String @unique @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  creation     DateTime  @default(now())
  modification DateTime  @default(now())
  suppression  DateTime?

  mediateursCoordonnes MediateurCoordonne[]

  @@map("coordinateurs")
}

model MediateurCoordonne {
  id String @id @default(uuid()) @db.Uuid

  mediateurId String    @map("mediateur_id") @db.Uuid
  mediateur   Mediateur @relation(fields: [mediateurId], references: [id])

  coordinateurId String       @map("coordinateur_id") @db.Uuid
  coordinateur   Coordinateur @relation(fields: [coordinateurId], references: [id])

  creation     DateTime  @default(now())
  modification DateTime  @default(now())
  suppression  DateTime?

  @@map("mediateurs_coordonnes")
}

// Lieu physique. La source de véritée est data-inclusion https://api.gouv.fr/les-api/api-data-inclusion
// Ce model joue le role de local data cache / search index pour les lieux
// ET role temporaire de stockage de structure qui vont etre envoyée chez data-inclusion
model Structure {
  id              String  @id @default(uuid()) @db.Uuid
  idDataInclusion String? @unique @map("id_data_inclusion")

  // Timestamps internes à coop-mediation-numerique
  creation     DateTime  @default(now())
  modification DateTime  @default(now())
  suppression  DateTime?

  organisation Organisation?
  lieuActivite LieuActivite?

  // # Champs Data inclusion

  // Code SIRET de la structure (identifiant officiel des entreprises en France)
  siret String? @db.VarChar(14)

  // Numéro RNA (Répertoire National des Associations) de la structure
  rna String? @db.VarChar(10)

  // Nom de la structure
  nom String

  // Nom de la commune rattachée à l'adresse de la structure
  commune String

  // Code postal rattaché à l'adresse de la structure
  codePostal String @map("code_postal") @db.VarChar(5)

  // Code officiel géographique de la commune rattachée à l'adresse de la structure
  codeInsee String? @map("code_insee") @db.VarChar(5)

  // Adresse de la structure
  adresse String

  // Complément d'adresse pour préciser la localisation exacte
  complementAdresse String? @map("complement_adresse")

  // Longitude géographique de la structure
  longitude Float?

  // Latitude géographique de la structure
  latitude Float?

  // Type de la structure (CCAS, ASSO, etc.)
  typologie String?

  // Numéro de téléphone de la structure
  telephone String?

  // Adresse email de la structure
  courriel String?

  // URL du site web de la structure
  siteWeb String? @map("site_web")

  // Description courte de la structure
  presentationResume String? @map("presentation_resume")

  // Description détaillée de la structure
  presentationDetail String? @map("presentation_detail")

  // Source des données
  source String?

  // Indique si la structure est une antenne
  antenne Boolean?

  // Date de dernière mise à jour des données
  dateMaj DateTime @map("date_maj")

  // URL vers la source des données
  lienSource String? @map("lien_source")

  // Horaires d'ouverture de la structure
  horairesOuverture String? @map("horaires_ouverture")

  // URL vers les informations d'accessibilité de la structure
  accessibilite String?

  // Labels nationaux obtenus par la structure
  labelsNationaux String[] @map("labels_nationaux")

  // Autres labels obtenus par la structure
  labelsAutres String[] @map("labels_autres")

  // Thématiques abordées par la structure
  thematiques String[]

  @@map("structures")
}

// Une organisation emploie des médiateurs.
// Ce n'est pas forcément leur lieu d'activité.
// Cela à un role administratif et organisationnel.
model Organisation {
  id String @id @default(uuid()) @db.Uuid

  monCompteProId String? @unique @map("mon_compte_pro_id")

  structureId String    @unique @map("structure_id") @db.Uuid
  structure   Structure @relation(fields: [structureId], references: [id])

  creation         DateTime           @default(now())
  modification     DateTime           @default(now())
  suppression      DateTime?
  MediateurEmploye MediateurEmploye[]

  @@map("organisations")
}

model MediateurEmploye {
  id String @id @default(uuid()) @db.Uuid

  mediateurId String    @map("mediateur_id") @db.Uuid
  mediateur   Mediateur @relation(fields: [mediateurId], references: [id])

  organisationId String       @map("organisation_id") @db.Uuid
  organisation   Organisation @relation(fields: [organisationId], references: [id])

  creation     DateTime  @default(now())
  modification DateTime  @default(now())
  suppression  DateTime?

  @@map("mediateurs_employes")
}

// Un lieu d’activité est une structure où un médiateur exerce son activité.
model LieuActivite {
  id String @id @default(uuid()) @db.Uuid

  structureId String    @unique @map("structure_id") @db.Uuid
  structure   Structure @relation(fields: [structureId], references: [id])

  enActivite MediateurEnActivite[]

  creation     DateTime  @default(now())
  modification DateTime  @default(now())
  suppression  DateTime?

  @@map("lieux_activites")
}

model MediateurEnActivite {
  id String @id @default(uuid()) @db.Uuid

  mediateurId String    @map("mediateur_id") @db.Uuid
  mediateur   Mediateur @relation(fields: [mediateurId], references: [id])

  lieuActiviteId String       @map("lieu_activite_id") @db.Uuid
  lieuActivite   LieuActivite @relation(fields: [lieuActiviteId], references: [id])

  creation     DateTime  @default(now())
  modification DateTime  @default(now())
  suppression  DateTime?

  @@map("mediateurs_en_activite")
}

enum MutationName {
  CreerMediateur                   @map("creer_mediateur")
  ModifierMediateur                @map("modifier_mediateur")
  SupprimerMediateur               @map("supprimer_mediateur")
  CreerCoordinateur                @map("creer_coordinateur")
  ModifierCoordinateur             @map("modifier_coordinateur")
  SupprimerCoordinateur            @map("supprimer_coordinateur")
  CreerMediateurCoordonne          @map("creer_mediateur_coordonne")
  SupprimerMediateurCoordonne      @map("supprimer_mediateur_coordonne")
  CreerStructure                   @map("creer_structure")
  ModifierStructure                @map("modifier_structure")
  MiseAJourDataInclusionStructures @map("mise_a_jour_data_inclusion_structures")

  @@map("mutation_name")
}

// Log d’utilisation des features de l’application
// Ce n’est pas une source vérité à la event sourcing
// C’est un log d’audit
model Mutation {
  id String @id @default(uuid()) @db.Uuid

  // User non renseigné si l’action est faite par un système
  userId String? @map("user_id") @db.Uuid
  user   User?   @relation(fields: [userId], references: [id])

  nom MutationName @map("nom")

  duration Int

  // Do not include sensitive data, only useful for debugging or auditing
  data Json

  timestamp DateTime @default(now()) @map("timestamp")

  @@map("mutations")
}
