generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "nativeDistinct", "relationJoins"]
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Account, Session, User and VerificationToken
// Match next-auth model https://next-auth.js.org/adapters/prisma
// Underscored names are from there too
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id") @db.Uuid
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Les administrateurs peuvent usurper des utilisateurs de fixtures pour tester des parcours
  // On garde la reference ici pour pouvoir revenir à la session initiale de l’administrateur
  usurperId String? @unique @map("usurper_id") @db.Uuid
  usurper   User?   @relation(fields: [usurperId], references: [id], name: "usurper")

  @@map("sessions")
}

// User roles are used for global app permissions
// Domain roles are defined by relations between user and domain models
enum UserRole {
  Admin @map("admin")
  User  @map("user")

  @@map("user_roles")
}

enum ProfilInscription {
  ConseillerNumerique @map("conseiller-numerique")
  Mediateur           @map("mediateur")
  Coordinateur        @map("coordinateur-conseiller-numerique")

  @@map("profil_inscription")
}

model User {
  id            String    @id @default(uuid()) @db.Uuid
  firstName     String?   @map("first_name")
  lastName      String?   @map("last_name")
  name          String?
  role          UserRole  @default(User)
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         Image?    @relation(fields: [imageId], references: [id])
  imageId       String?   @unique @map("image_id") @db.Uuid
  location      String?
  title         String?
  description   String?
  accounts      Account[]
  sessions      Session[]

  // Created by a fixture system, can be reset and will only be here on preview envs
  isFixture Boolean @default(false) @map("is_fixture")

  created   DateTime  @default(now())
  updated   DateTime  @default(now())
  deleted   DateTime?
  lastLogin DateTime? @map("last_login")

  // Flux d’inscription
  profilInscription ProfilInscription? @map("profil_inscription")
  structureEmployeuseRenseignee DateTime? @map("structure_employeuse_renseignee")
  lieuxActiviteRenseignes DateTime? @map("lieux_activite_renseignes")
  inscriptionValidee DateTime? @map("inscription_validee")

  uploads Upload[]

  mediateur    Mediateur?
  coordinateur Coordinateur?
  mutations    Mutation[]
  emplois      EmployeStructure[]
  usurpateur   Session?           @relation(name: "usurper")

  @@map("users")
}

model VerificationToken {
  token      String   @id
  identifier String // Email or other user identifier
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Image {
  id       String @id @default(uuid()) @db.Uuid
  legacyId Int?   @unique @map("legacy_id")

  altText String? @map("alt_text")

  blurUrl String? @map("blur_url")

  // Original dimensions in pixel (before cropping)
  originalHeight Int? @map("original_heigth")
  originalWidth  Int? @map("original_width")

  // Relative height crop (0-1)
  cropHeight Float @default(1) @map("crop_height")
  // Relative width crop
  cropWidth  Float @default(1) @map("crop_width")
  // Relative top crop
  cropTop    Float @default(0) @map("crop_top")
  // Relative left crop
  cropLeft   Float @default(0) @map("crop_left")

  // Cropped dimensions in pixels
  height Int?
  width  Int?

  upload    Upload @relation(fields: [uploadKey], references: [key])
  uploadKey String @unique @map("upload_key")
  user      User?

  @@map("images")
}

model Upload {
  key       String  @id
  legacyKey String? @unique @map("legacy_key")
  mimeType  String  @map("mime_type")
  name      String

  // Size in bytes
  size Int?

  uploadedBy   User?   @relation(fields: [uploadedById], references: [id])
  uploadedById String? @map("uploaded_by_id") @db.Uuid

  created DateTime @default(now())

  // Is an image
  image Image?

  @@map("uploads")
}

model JobExecution {
  id String @id @default(uuid()) @db.Uuid

  name String

  started   DateTime
  completed DateTime?
  errored   DateTime?
  duration  Int?
  data      Json?
  result    Json?
  error     String?

  @@map("job_executions")
}

// Domain model

// Un médiateur numérique
model Mediateur {
  id String @id @default(uuid()) @db.Uuid

  userId String @unique @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  // Un médiateur peut être un conseiller numérique
  conseillerNumerique ConseillerNumerique?

  creation     DateTime  @default(now())
  modification DateTime  @default(now())
  suppression  DateTime?

  coordinations MediateurCoordonne[]
  enActivite    MediateurEnActivite[]

  @@map("mediateurs")
}

// Source de vérité https://api.conseiller-numerique.gouv.fr
model ConseillerNumerique {
  // ID externe chez conseiller-numerique
  id String @id

  mediateurId String    @unique @map("mediateur_id") @db.Uuid
  mediateur   Mediateur @relation(fields: [mediateurId], references: [id])

  @@map("conseillers_numeriques")
}

// Tous les coordinateurs sont coordinateurs officiellement chez conseiller-numérique
model Coordinateur {
  id String @id @default(uuid()) @db.Uuid

  // Clé primaire chez conseiller-numerique
  conseillerNumeriqueId String @unique @map("conseiller_numerique_id")

  userId String @unique @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  creation     DateTime  @default(now())
  modification DateTime  @default(now())
  suppression  DateTime?

  mediateursCoordonnes MediateurCoordonne[]

  @@map("coordinateurs")
}

model MediateurCoordonne {
  id String @id @default(uuid()) @db.Uuid

  mediateurId String    @map("mediateur_id") @db.Uuid
  mediateur   Mediateur @relation(fields: [mediateurId], references: [id])

  coordinateurId String       @map("coordinateur_id") @db.Uuid
  coordinateur   Coordinateur @relation(fields: [coordinateurId], references: [id])

  creation     DateTime  @default(now())
  modification DateTime  @default(now())
  suppression  DateTime?

  @@map("mediateurs_coordonnes")
}

// Lieu physique. Source de vérité interne. Peut être mise à jour depuis StructureCartographieNationale.
// Ce model recense les structures utilisées dans la coop, ce n'est pas une source de vérité exaustive des structures
model Structure {
  // Id
  id String @id @default(uuid()) @db.Uuid

  structureCartographieNationaleId String?                         @unique @map("id_cartographie_nationale")
  structureCartographieNationale   StructureCartographieNationale? @relation(fields: [structureCartographieNationaleId], references: [id])

  // Timestamps internes à coop-mediation-numerique
  creation     DateTime  @default(now())
  modification DateTime  @default(now())
  suppression  DateTime?

  // # Relations
  emplois              EmployeStructure[]
  mediateursEnActivite MediateurEnActivite[]

  // Champs métier

  nom String

  typologie String?

  adresse String
  commune String
  codePostal String @map("code_postal") @db.VarChar(5)
  codeInsee String? @map("code_insee") @db.VarChar(5)
  complementAdresse String? @map("complement_adresse")
  latitude Float?
  longitude Float?

  siretOuRna String? @map("siret_ou_rna")

  visiblePourCartographieNationale Boolean @default(false) @map("visible_pour_cartographie_nationale")

  presentationResume  String?  @map("presentation_resume")
  presentationDetail  String?  @map("presentation_detail")
  siteWeb             String?  @map("site_web")
  accessibilite       String?
  horaires            String?
  thematiques         String[]
  typesAccompagnement String[]

  // TODO finish this according to our Figma complete form for this model and on import, update it from carto data
  @@map("structures")
}

// Lieu physique. CF LieuStandardMediationNumerique.ts.
// La source de véritée est cartographie-nationale https://anct-cartographie-nationale.github.io/api-application/v0/#operation/lieux-inclusion-numerique.get
// Ce model joue le role de local data cache / search index pour les lieux
model StructureCartographieNationale {
  // Id externe chez cartographie-nationale
  id String @id

  // Timestamps internes à coop-mediation-numerique
  creation     DateTime  @default(now())
  modification DateTime  @default(now())
  suppression  DateTime?

  // Importation depuis dataset cartographie-nationale
  creationImport     DateTime? @map("creation_import")
  // modifié suite à une mise à jour de data-inclusion
  modificationImport DateTime? @map("modification_import")
  // plus disponible dans data-inclusion
  suppressionImport  DateTime? @map("suppression_import")

  // # Relations
  structure Structure?

  // # Champs cartographie nationale

  // SIRET ou RNA ou RIDET
  pivot String

  // Nom du lieu
  nom String

  // Nom de la commune rattachée à l'adresse du lieu
  commune String

  // Code postal rattaché à l'adresse du lieu
  codePostal String @map("code_postal") @db.VarChar(5)

  // Code officiel géographique de la commune rattachée à l'adresse du lieu
  codeInsee String? @map("code_insee") @db.VarChar(5)

  // Adresse du lieu
  adresse String

  // Complément d'adresse
  complementAdresse String? @map("complement_adresse")

  // Latitude du lieu
  latitude Float?

  // Longitude du lieu
  longitude Float?

  // Typologie du lieu
  typologie String?

  // Numéro de téléphone du lieu
  telephone String? @db.VarChar(20)

  // Courriel(s) de contact du lieu
  courriels String?

  // Site web du lieu
  siteWeb String? @map("site_web")

  // Horaires d'ouverture du lieu
  horaires String?

  // Présentation résumée du lieu
  presentationResume String? @map("presentation_resume")

  // Présentation détaillée du lieu
  presentationDetail String? @map("presentation_detail")

  // Structure collectant la donnée
  source String?

  // Itinérance du lieu
  itinerance String?

  // Structure parente du lieu
  structureParente String? @map("structure_parente")

  // Date de mise à jour des données
  dateMaj DateTime @map("date_maj") @db.Date

  // Services proposés par le lieu
  services String

  // Publics spécifiquement adressés par le lieu
  publicsSpecifiquementAdresses String? @map("publics_specifiquement_adresses")

  // Prise en charge spécifique des publics
  priseEnChargeSpecifique String? @map("prise_en_charge_specifique")

  // Frais à charge pour accéder au lieu
  fraisACharge String? @map("frais_a_charge")

  // Dispositifs et programmes nationaux auxquels appartient le lieu
  dispositifProgrammesNationaux String? @map("dispositif_programmes_nationaux")

  // Formations et labels obtenus par le lieu
  formationsLabels String? @map("formations_labels")

  // Autres formations et labels obtenus par le lieu
  autresFormationsLabels String? @map("autres_formations_labels")

  // Modalités d'accès au lieu
  modalitesAcces String? @map("modalites_acces")

  // Modalités d'accompagnement proposées par le lieu
  modalitesAccompagnement String? @map("modalites_accompagnement")

  // URL vers la fiche Accès libre du lieu
  ficheAccesLibre String? @map("fiche_acces_libre")

  // URL vers le site de prise de rendez-vous en ligne
  priseRdv String? @map("prise_rdv")

  @@map("structures_cartographie_nationale")
}

model EmployeStructure {
  id String @id @default(uuid()) @db.Uuid

  userId String @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  structureId String    @map("structure_id") @db.Uuid
  structure   Structure @relation(fields: [structureId], references: [id])

  creation     DateTime  @default(now())
  modification DateTime  @default(now())
  suppression  DateTime?

  @@map("employes_structures")
}

model MediateurEnActivite {
  id String @id @default(uuid()) @db.Uuid

  mediateurId String    @map("mediateur_id") @db.Uuid
  mediateur   Mediateur @relation(fields: [mediateurId], references: [id])

  structureId String    @map("structure_id") @db.Uuid
  structure   Structure @relation(fields: [structureId], references: [id])

  creation     DateTime  @default(now())
  modification DateTime  @default(now())
  suppression  DateTime?

  @@map("mediateurs_en_activite")
}

enum MutationName {
  CreerMediateur                           @map("creer_mediateur")
  ModifierMediateur                        @map("modifier_mediateur")
  SupprimerMediateur                       @map("supprimer_mediateur")
  CreerCoordinateur                        @map("creer_coordinateur")
  ModifierCoordinateur                     @map("modifier_coordinateur")
  SupprimerCoordinateur                    @map("supprimer_coordinateur")
  CreerMediateurCoordonne                  @map("creer_mediateur_coordonne")
  SupprimerMediateurCoordonne              @map("supprimer_mediateur_coordonne")
  CreerStructure                           @map("creer_structure")
  ModifierStructure                        @map("modifier_structure")
  MiseAJourStructuresCartographieNationale @map("mise_a_jour_structures_cartographie_nationale")

  @@map("mutation_name")
}

// Log d’utilisation des features de l’application
// Ce n’est pas une source vérité à la event sourcing
// C’est un log d’audit
model Mutation {
  id String @id @default(uuid()) @db.Uuid

  // User non renseigné si l’action est faite par un système
  userId String? @map("user_id") @db.Uuid
  user   User?   @relation(fields: [userId], references: [id])

  nom MutationName @map("nom")

  duration Int

  // Do not include sensitive data, only useful for debugging or auditing
  data Json

  timestamp DateTime @default(now()) @map("timestamp")

  @@map("mutations")
}
